on:
  push:
    branches: [main]
  pull_request:
  release:
    types: [published, prereleased]

name: CI

jobs:

  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    steps:
      - uses: actions/checkout@v3.0.2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up Python
        uses: actions/setup-python@v3.1.2
        with:
          python-version: ${{ env.python_version }}
      - name: Lint with Pre-commit
        uses: pre-commit/action@v2.0.3

  build:
    needs: lint
    name: build GTK binaries with gvsbuild
    runs-on: windows-latest
    timeout-minutes: 60
    if: "!contains(github.event.head_commit.message, 'skip ci')"

    steps:
      - name: Checkout
        uses: actions/checkout@v3.0.2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up Python
        uses: actions/setup-python@v3.1.2
        with:
          python-version: '3.10'
      - name: Use Python Dependency Cache
        uses: actions/cache@v3.0.5
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ runner.os }}-poetry-
      - name: Install Poetry
        run: python -m pip install poetry==1.1.13
      - name: Configure Poetry
        run: poetry config virtualenvs.in-project true
      - name: Install Python Dependencies
        run: poetry install
      # Temporarily move the preinstalled git, it causes errors related to cygwin.
      - name: Move git binary
        run: move "C:\Program Files\Git\usr\bin" "C:\Program Files\Git\usr\notbin"
        shell: cmd
      - name: Build
        run: >
          poetry run gvsbuild build --enable-gi --py-wheel gtk3 graphene
          gobject-introspection pycairo pygobject adwaita-icon-theme hicolor-icon-theme
          gtksourceview4
      - name: Copy wheels to the build directory
        if: steps.cache.outputs.cache-hit != 'true'
        run: Get-ChildItem C:\gtk-build\build\x64\release\*\dist\*.whl | ForEach-Object -process { cp $_ C:\gtk-build\gtk\x64\release\ }
      - name: Restore git binary
        run: move "C:\Program Files\Git\usr\notbin" "C:\Program Files\Git\usr\bin"
        shell: cmd
      - name: Create Source Dist and Wheel
        run: poetry build
      - name: Upload gaphor-${{ steps.setup_and_test.outputs.version }}.tar.gz
        uses: actions/upload-artifact@v3
        if: github.event_name == 'release'
        with:
          name: gvsbuild-${{ github.event.release.tag_name }}.tar.gz
          path: dist/gaphor-${{ github.event.release.tag_name }}.tar.gz
      - name: Upload gaphor-${{ github.event.release.tag_name }}-py3-none-any.whl
        uses: actions/upload-artifact@v3
        if: github.event_name == 'release'
        with:
          name: gvsbuild-${{ github.event.release.tag_name }}-py3-none-any.whl
          path: dist/gvsbuild-${{ github.event.release.tag_name }}-py3-none-any.whl
      - name: Upload Assets (release only)
        uses: AButler/upload-release-assets@v2.0
        if: github.event_name == 'release'
        with:
          files: "dist/*"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish to PyPI (release only)
        if: github.event_name == 'release'
        run: poetry publish -u __token__ -p ${{ secrets.PYPI_TOKEN }}
