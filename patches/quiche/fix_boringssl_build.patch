diff --git a/src/build.rs b/src/build.rs
index 7a5ae27..483eb6a 100644
--- a/src/build.rs
+++ b/src/build.rs
@@ -45,15 +45,7 @@ const CMAKE_PARAMS_IOS: &[(&str, &[(&str, &str)])] = &[
 /// so adjust library location based on platform and build target.
 /// See issue: https://github.com/alexcrichton/cmake-rs/issues/18
 fn get_boringssl_platform_output_path(lib: &str) -> String {
-    if cfg!(windows) {
-        if cfg!(debug_assertions) {
-            format!("{}/Debug", lib)
-        } else {
-            format!("{}/RelWithDebInfo", lib)
-        }
-    } else {
-        lib.to_string()
-    }
+    lib.to_string()
 }
 
 /// Returns a new cmake::Config for building BoringSSL.
@@ -128,6 +120,10 @@ fn get_boringssl_cmake_config() -> cmake::Config {
             boringssl_cmake
         },
 
+        "windows" => {
+            boringssl_cmake.generator("Ninja");
+            boringssl_cmake
+        },
         _ => {
             // Configure BoringSSL for building on 32-bit non-windows platforms.
             if arch == "x86" && os != "windows" {
@@ -197,6 +193,11 @@ fn main() {
         let ssl_dir = format!("{}/build/{}", bssl_dir, ssl_path);
         println!("cargo:rustc-link-search=native={}", ssl_dir);
         println!("cargo:rustc-link-lib=static=ssl");
+
+        let profile = std::env::var("PROFILE").unwrap();
+        if profile != "release" && std::env::var("CARGO_CFG_TARGET_OS").unwrap() == "windows" {
+            println!("cargo:rustc-link-lib=msvcrtd");
+        }
     }
 
     // MacOS: Allow cdylib to link with undefined symbols
