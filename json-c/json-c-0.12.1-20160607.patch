diff -urpN json-c-0.12.1-20160607.orig/json_config.h.win32 json-c-0.12.1-20160607/json_config.h.win32
--- json-c-0.12.1-20160607.orig/json_config.h.win32	1970-01-01 09:00:00.000000000 +0900
+++ json-c-0.12.1-20160607/json_config.h.win32	2016-08-26 10:27:26.000762200 +0900
@@ -0,0 +1,5 @@
+
+/* Define to 1 if you have the <inttypes.h> header file. */
+#if defined(_MSC_VER) && _MSC_VER >= 1800
+#define JSON_C_HAVE_INTTYPES_H 1
+#endif
diff -urpN json-c-0.12.1-20160607.orig/json_object.c json-c-0.12.1-20160607/json_object.c
--- json-c-0.12.1-20160607.orig/json_object.c	2016-06-07 13:05:03.000000000 +0900
+++ json-c-0.12.1-20160607/json_object.c	2016-08-29 11:34:56.501623200 +0900
@@ -390,7 +390,7 @@ void json_object_object_add(struct json_
 		lh_table_insert(jso->o.c_object, strdup(key), val);
 		return;
 	}
-	existing_value = (void *)existing_entry->v;
+	existing_value = (json_object *)existing_entry->v;
 	if (existing_value)
 		json_object_put(existing_value);
 	existing_entry->v = val;
@@ -625,8 +625,8 @@ struct json_object* json_object_new_doub
 int json_object_userdata_to_json_string(struct json_object *jso,
 	struct printbuf *pb, int level, int flags)
 {
-	int userdata_len = strlen(jso->_userdata);
-	printbuf_memappend(pb, jso->_userdata, userdata_len);
+	int userdata_len = strlen((const char *)jso->_userdata);
+	printbuf_memappend(pb, (const char *)jso->_userdata, userdata_len);
 	return userdata_len;
 }
 
diff -urpN json-c-0.12.1-20160607.orig/json-c-0.12.1-20160607.patch.patch-applied json-c-0.12.1-20160607/json-c-0.12.1-20160607.patch.patch-applied
--- json-c-0.12.1-20160607.orig/json-c-0.12.1-20160607.patch.patch-applied	1970-01-01 09:00:00.000000000 +0900
+++ json-c-0.12.1-20160607/json-c-0.12.1-20160607.patch.patch-applied	2016-08-29 11:34:56.532887700 +0900
@@ -0,0 +1 @@
+done
\ No newline at end of file
diff -urpN json-c-0.12.1-20160607.orig/linkhash.c json-c-0.12.1-20160607/linkhash.c
--- json-c-0.12.1-20160607.orig/linkhash.c	2016-06-07 13:05:03.000000000 +0900
+++ json-c-0.12.1-20160607/linkhash.c	2016-08-29 11:34:56.501623200 +0900
@@ -21,6 +21,11 @@
 # include <endian.h>    /* attempt to define endianness */
 #endif
 
+#ifdef _MSC_VER
+# define WIN32_LEAN_AND_MEAN
+# include <windows.h>   /* Get InterlockedCompareExchange */
+#endif
+
 #include "random_seed.h"
 #include "linkhash.h"
 
@@ -408,7 +413,7 @@ unsigned long lh_char_hash(const void *k
 #if defined __GNUC__
 		__sync_val_compare_and_swap(&random_seed, -1, seed);
 #elif defined _MSC_VER
-		InterlockedCompareExchange(&random_seed, seed, -1);
+		InterlockedCompareExchange((LONG *)&random_seed, seed, -1);
 #else
 #warning "racy random seed initializtion if used by multiple threads"
 		random_seed = seed; /* potentially racy */
diff -urpN json-c-0.12.1-20160607.orig/math_compat.h json-c-0.12.1-20160607/math_compat.h
--- json-c-0.12.1-20160607.orig/math_compat.h	2016-06-07 13:05:03.000000000 +0900
+++ json-c-0.12.1-20160607/math_compat.h	2016-08-29 11:34:56.501623200 +0900
@@ -18,11 +18,14 @@
 #endif
 
 #ifndef HAVE_DECL_NAN
-#error This platform does not have nan()
+#include <float.h>
+#define INFINITY (DBL_MAX + DBL_MAX)
+#define HAVE_DECL_INFINITY
 #endif
 
 #ifndef HAVE_DECL_INFINITY
-#error This platform does not have INFINITY
+#define NAN (INFINITY - INFINITY)
+#define HAVE_DECL_NAN
 #endif
 
 #endif
diff -urpN json-c-0.12.1-20160607.orig/random_seed.c json-c-0.12.1-20160607/random_seed.c
--- json-c-0.12.1-20160607.orig/random_seed.c	2016-06-07 13:05:03.000000000 +0900
+++ json-c-0.12.1-20160607/random_seed.c	2016-08-29 11:35:34.396413600 +0900
@@ -11,6 +11,7 @@
 
 #include <stdio.h>
 #include "config.h"
+#include "random_seed.h"
 
 #define DEBUG_SEED(s)
 
 diff -urpN json-c-0.12.1-20160607.orig/json_object.c json-c-0.12.1-20160607/json_object.c
--- json-c-0.12.1-20160607.orig/json_object.c 2016-12-23 13:28:52.030112700 +0900
+++ json-c-0.12.1-20160607/json_object.c  2016-12-23 13:27:45.452742400 +0900
@@ -478,7 +478,7 @@ static int json_object_int_to_json_strin
            int level,
            int flags)
 {
-  return sprintbuf(pb, "%"PRId64, jso->o.c_int64);
+  return sprintbuf(pb, "%" PRId64, jso->o.c_int64);
 }
 
 struct json_object* json_object_new_int(int32_t i)